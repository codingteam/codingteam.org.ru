// This script will build and deploy the current LogList version to the target server.
// Required properties:
// - APP_SETTINGS: appsettigs.json content
// - GIT_BRANCH: name of the branch to deploy
// - GIT_CREDENTIALS: credentials to download the source code
// - MAINTAINERS: space-separated email list
// - SCP: path to scp executable
// - SSH: path to ssh executable
// - SSH_HOST: name of the target server
// - SSH_LOGIN: login to access target server
// - SSH_PORT: port to access target server
// - SSH_PRIVATE_KEY: private key to access target server
node {
    stage 'Checkout'
    git branch: GIT_BRANCH,
            credentialsId: GIT_CREDENTIALS,
            url: 'git@github.com:codingteam/codingteam.org.ru.git'

    stage 'Clean'
    bat 'if exist codingteam.org.ru\\ rd /s /q codingteam.org.ru'

    stage 'Prepare'
    bat 'powershell -c Move-Item * codingteam.org.ru/'
    dir ('codingteam.org.ru') {
        // We need to execute the whole script in the codingteam.org.ru
        // directory because the current dotnet-cli names the project DLL based
        // on the source directory name.
        writeFile file: 'bin/release/netcoreapp1.0/publish/appsettings.json', text: APP_SETTINGS

        def keyFile = 'cor-site.key'
        writeFile file: keyFile, text: SSH_PRIVATE_KEY

        stage 'Build'
        bat 'dotnet restore'
        bat 'dotnet build'
        bat 'dotnet publish -c release'

        def executeScript = { scriptPath ->
            bat "type $scriptPath | $SSH -o StrictHostKeyChecking=no -i $keyFile -p $SSH_PORT $SSH_LOGIN@$SSH_HOST"
        }

        catchError {
            try {
                stage 'Stop'
                executeScript 'scripts\\stop.sh'

                stage 'Upload'
                bat "$SCP -o StrictHostKeyChecking=no -i $keyFile -P $SSH_PORT -rp bin/release/netcoreapp1.0/publish/* $SSH_LOGIN@$SSH_HOST:/opt/codingteam/codingteam.org.ru"

                stage 'Start'
                executeScript 'scripts\\start.sh'
            } finally {
                bat "del $keyFile"
            }
        }
    }

    stage 'Notify'
    def isSuccess = currentBuild.result == null
    def buildStatus = isSuccess ? 'SUCCESS' : currentBuild.result

    mail to: MAINTAINERS, subject: "${env.JOB_NAME}#${env.BUILD_NUMBER}: ${buildStatus}", body: """Build #${env.BUILD_NUMBER} of Jenkins job ${env.JOB_NAME} is finished with status ${buildStatus}.

Check ${env.BUILD_URL} for details."""
}
